@page "/Chat"

@using OrgMessenger.DTO
@using OrgMessenger.Services.ApiReq
@using OrgMessenger.Services.Sockets
@using Radzen
@using Radzen.Blazor
@using System.Text.Json
@inherits ComponentBase
@inject ChatApi chatApi;
@inject NavigationManager nav;
<RadzenStack class="rz-p-0 ">

    <RadzenChat @ref="eventsChat"
    Title="@Contact"
    CurrentUserId="@currentUserId"
    Users="@users"
    Messages="@messages"
    MessagesChanged="@OnMessagesChanged"
    Placeholder="پیام خود را بنویسید..."
    Style="height: 500px;"
    MessageAdded="@OnMessageAdded"
    MessageSent="@OnMessageSent"
    UserAdded="@OnUserAdded"
    UserRemoved="@OnUserRemoved"
    ChatCleared="@OnChatCleared" />
</RadzenStack>


@code {
    [SupplyParameterFromQuery] public string? Contact { get; set; }
    private bool jsReady;


    protected override async Task OnInitializedAsync()
    {

        nav.LocationChanged += OnLocationChangedAsync;
        await ParseQueryAsync();
        // await InitializeChatAsync();
        users.AddRange(new[]
        {
            new ChatUser { Id = "1", Name = "من", Color = "#1976d2" },
            new ChatUser { Id = "2", Name = Contact, Color = "#388e3c" },
        });
        SocketEventDispatcher.Subscribe("getUsers", OnUsers);
        SocketEventDispatcher.Subscribe("privateChat", OnPrivateChat);
    }

    private async void OnLocationChangedAsync(object? sender, LocationChangedEventArgs e)
    {
        await ParseQueryAsync();
        await InitializeChatAsync();

        await InvokeAsync(StateHasChanged);
    }

    private Task ParseQueryAsync()
    {
        var uri = new Uri(nav.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        Contact = query.TryGetValue("Contact", out var val) ? val.ToString() : null;

        return Task.CompletedTask;
    }

    private async Task InitializeChatAsync()
    {


        messages = new();
        history = await chatApi.UserChatHistoryWeb();
        var currentHistory = history.History.FirstOrDefault(u => u.Key == Contact);
        if (currentHistory.Value != null)
        {
            foreach (var item in currentHistory.Value.OrderBy(u => u.CreateDate))
            {
                if (item.FromUserName == Contact)
                {
                    messages.AddRange(new[]
            {
                    new ChatMessage { Content = item.Message, UserId = "2", Timestamp = item.CreateDate },
                });
                }
                else
                {
                    messages.AddRange(new[]
            {
                    new ChatMessage { Content = item.Message, UserId = "1", Timestamp = item.CreateDate },
                });
                }
            }

        }
        StateHasChanged();
    }


    private async Task SafeInvokeJsAsync()
    {
        if (!jsReady)
            return; // در هنگام refresh، js هنوز وصل نشده

        try
        {
            // مثال از فراخوانی امن به JS
            // await js.InvokeVoidAsync("console.log", $"JS interop for {contact} executed safely!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"JS error suppressed: {ex.Message}");
        }
    }

    public void Dispose()
    {
        nav.LocationChanged -= OnLocationChangedAsync;
    }


















    RadzenChat eventsChat;

    private string currentUserId = "1";
    private List<ChatUser> users = new();
    private List<ChatMessage> messages = new();
    private Random random = new();
    private UserChatHistoryWeb history = new();
    private MyInfoDto? Info;


    private List<UserItemDto>? list = new();



    private void OnUsers(string data)
    {
        InvokeAsync(() =>
    {
        list = JsonSerializer.Deserialize<List<UserItemDto>>(data);
        StateHasChanged();
    });


    }






    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            // JSRuntime در رندر اول آماده می‌شود
            jsReady = true;
            await InitializeChatAsync();
            // اگر نیاز به JS بود در همین لحظه درخواست بده
            await SafeInvokeJsAsync();
        }
    }


    private PrivateChatDto? PrivateChat;


    private void OnPrivateChat(string data)
    {
        InvokeAsync(() =>
    {
        PrivateChat = JsonSerializer.Deserialize<PrivateChatDto>(data);
        // if(PrivateChat.==Contact){

        // }
        OnAppendToMessages(PrivateChat);
        StateHasChanged();
    });


    }

   
    private void OnAddUser()
    {
        var names = new[] { "Emma Davis", "Michael Garcia", "Sarah Martinez", "David Rodriguez", "Lisa Anderson" };
        var colors = new[] { "#1976d2", "#388e3c", "#f57c00", "#7b1fa2", "#d32f2f", "#0288d1", "#689f38", "#ffa000" };

        var newUser = new ChatUser
            {
                Id = Guid.NewGuid().ToString(),
                Name = names[random.Next(names.Length)],
                Color = colors[random.Next(colors.Length)]
            };

        users.Add(newUser);
        StateHasChanged();
    }

    private void OnRemoveUser()
    {
        if (users.Count > 1)
        {
            users.RemoveAt(users.Count - 1);
            StateHasChanged();
        }
    }

    async Task OnMessageAdded(ChatMessage message)
    {
        var participant = users.FirstOrDefault(p => p.Id == message.UserId);
        var participantName = participant?.Name ?? "Unknown";
        PrivateChatSocketIODto Request = new();
        Request.Data.To = Contact;
        Request.Data.Message = message.Content;
        Request.Data.ClientTime = DateTimeOffset.Now.ToUnixTimeMilliseconds();
        var Result = await chatApi.PrivateChatSocketIO(Request);
    }

    void OnAppendToMessages(PrivateChatDto privateChatDto)
    {
        messages.AddRange(new[]
        {
            new ChatMessage { Content = PrivateChat.LastMessage, UserId = "2", Timestamp = DateTime.Now },
            });
    }

    void OnMessageSent(ChatMessage message)
    {
    }

    void OnUserAdded(ChatUser participant)
    {
    }

    void OnUserRemoved(ChatUser participant)
    {
    }

    void OnChatCleared()
    {
    }

    void OnMessagesChanged(IEnumerable<ChatMessage> newMessages)
    {
        messages = newMessages.ToList();
        StateHasChanged();
    }
}
