@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.IdentityModel.JsonWebTokens
@using OrgMessenger.DTO
@using OrgMessenger.Services.ApiReq
@using OrgMessenger.Services.Sockets
@using Shop.Security
@using Shop.Services
@using Shop.Services.Requests
@using System.Security.Claims
@using System.Text.Json
@attribute [Authorize]
@rendermode InteractiveServer
@inject SocketService Socket
@inject IJSRuntime JS
@inject AccessTokenService accessTokenService;
@inject ResourceService resourceService;
@inject AuthService authService;
@inject JWTAuthenticationStateProvider authStateProvider;
@inject NavigationManager nav;
@inject ChatApi chatApi;

 @foreach (var contact in Cantacts)
{
    if(contact.IsOnline){
        <RadzenPanelMenuItem Icon="contacts_product" IconColor="green" Text="@contact.UserName"
                             Click="@(() => nav.NavigateTo($"/Chat?Contact={contact.UserName}"))" />
    }
   else{
        <RadzenPanelMenuItem Icon="contacts_product" IconColor="gray" Text="@contact.UserName"
                             Click="@(() => nav.NavigateTo($"/Chat?Contact={contact.UserName}"))" />
   }
}
@code {
    private void NavigateToContact(string username)
    {
        nav.NavigateTo($"/Chat?Contact={username}");
    }
}
@code {
    private List<UserItemDto>? onlineList = new();
    private UserChatHistoryWeb userList = new();
    private List<ContactDto> Cantacts = new();

    protected override void OnInitialized()
    {
        SocketEventDispatcher.Subscribe("getUsers", OnUsers);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            userList = await chatApi.UserChatHistoryWeb();
            await ShowCantacts();
        }
    }




    private void OnUsers(string data)
    {
        InvokeAsync(() =>
    {
        onlineList = JsonSerializer.Deserialize<List<UserItemDto>>(data);

    });
        
    }


    private async Task ShowCantacts(){
        foreach (var item in userList.History)
        {
            Cantacts.Add(new ContactDto()
            {
                UserName=item.Key,
                IsOnline=onlineList.Any(u=>u.Username==item.Key)
            });
        }
        StateHasChanged();
    }
}






    @* // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         dotNetRef = DotNetObjectReference.Create(this);
    //         var token = await accessTokenService.GetToken();
    //         await JS.InvokeVoidAsync("connectSocket", token, dotNetRef);
    //     }
    // }

    // [JSInvokable]
    // public void OnGetUsersReceived(List<UserItemDto>
    data)
    // {
    //     list = data;
    //     StateHasChanged();
    // }

    // public async ValueTask DisposeAsync()
    // {
    //     await JS.InvokeVoidAsync("disconnectSocket");
    //     dotNetRef?.Dispose();
    // }
 *@

