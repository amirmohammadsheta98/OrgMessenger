@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.IdentityModel.JsonWebTokens
@using OrgMessenger.DTO
@using OrgMessenger.Services.Sockets
@using Shop.Security
@using Shop.Services
@using Shop.Services.Requests
@using System.Security.Claims
@using System.Text.Json
@attribute [Authorize]
@rendermode InteractiveServer

@inject AccessTokenService accessTokenService;
@inject ResourceService resourceService;
@inject AuthService authService;
@inject JWTAuthenticationStateProvider authStateProvider;




<!-- چپ: نام کاربر و خروج -->
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px">
    <AuthorizeView>
        @if(Info!=null){
            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="contacts_product" Size="ButtonSize.Small">@Info.UserName</RadzenButton>

        }

    </AuthorizeView>
    
</RadzenStack>


@code {
    private MyInfoDto? Info;


    protected override void OnInitialized()
    {
        SocketEventDispatcher.Subscribe("myInfo", OnMyInfo);
    }

    private void OnMyInfo(string data)
    {
        InvokeAsync(() =>
    {
        Info = JsonSerializer.Deserialize<MyInfoDto>(data);
        StateHasChanged();
    });

    }



    // public string Email { get; set; }
    // public string Role { get; set; }
    // public string Token { get; set; }
    // public DateTime TokenExpired { get; set; }
    // public DateTime CurrentTime { get; set; }

    // public bool IsVerified { get; set; }
    // private Timer timer;



    // protected override async Task OnInitializedAsync()
    // {
    //     await InitialValues();
    //     timer = new Timer(UpdateClock, null, 0, 1000);
    // }

    // public async Task InitialValues()
    // {
    //     var state = await authStateProvider.GetAuthenticationStateAsync();
    //     var user = state.User;
    //     if (user.Identity.IsAuthenticated)
    //     {
    //         Token = await accessTokenService.GetToken();
    //         Email = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email)?.Value;
    //         Role = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value;

    //         var expires = user.Claims.FirstOrDefault(x => x.Type == JwtRegisteredClaimNames.Exp).Value;
    //         if (long.TryParse(expires, out var exp))
    //         {
    //             TokenExpired = DateTimeOffset.FromUnixTimeSeconds(exp).LocalDateTime;
    //         }
    //     }
    // }

    // public async Task LogOut()
    // {
    //     await authService.Logout();
    // }

    // public async Task VerifyGetRequest()
    // {
    //     IsVerified = await resourceService.Verify();
    //     await InitialValues();
    // }

    // public void UpdateClock(object state)
    // {
    //     CurrentTime = DateTime.Now;

    //     InvokeAsync(StateHasChanged);
    // }
}
